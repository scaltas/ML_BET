@model List<MatchScore>

<style>
    .match-scores-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px;
    }

        .match-scores-table th, .match-scores-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        .match-scores-table th {
            background-color: #333;
            color: white;
        }

        .match-scores-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .match-scores-table tr:hover {
            background-color: #ddd;
        }

    /* Add classes for the checkmark and cross icons */
    .checkmark {
        color: green;
    }

    .cross {
        color: red;
    }
</style>

<table class="match-scores-table">
    <thead>
        <tr>
            <th>Match</th>
            <th>Teams</th>
            <th>First Half Score</th>
            <th>Score</th>
            <th>Match Date</th>
            <th>Sample</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody id="match-score-body">
    </tbody>
</table>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        // Function to fetch match numbers
        function fetchMatchNumbers() {
            return new Promise(function (resolve, reject) {
                $.get("/MatchScore/GetMatchNumbers", function (numbers) {
                    resolve(numbers);
                });
            });
        }

        // Function to fetch a single match prediction
        function fetchSingleMatch(matchNumber) {
            return new Promise(function (resolve, reject) {
                $.get("/MatchScore/GetMatchPrediction?number=" + matchNumber, function (data) {
                    resolve(data);
                });
            });
        }

        // Function to fetch and display match predictions asynchronously in batches of ten
        async function fetchMatchPredictionsInBatches() {
            const matchNumbers = await fetchMatchNumbers();
            const batchSize = 10;
            let currentIndex = 0;
            let totalProcessed = 0;

            while (currentIndex < matchNumbers.length) {
                const batch = matchNumbers.slice(currentIndex, currentIndex + batchSize);
                const promises = batch.map(matchNumber => fetchSingleMatch(matchNumber));

                const batchResults = await Promise.all(promises);

                batchResults.forEach(data => {
                    var row = '<tr>' +
                        '<td>' + data.matchId + '</td>' +
                        '<td>' + data.homeTeam + ' - ' + data.awayTeam + '</td>' +
                        '<td>' + data.firstHalfScore + '</td>' +
                        '<td>' + data.predictedScore + '</td>' +
                        '<td>' + new Date(data.matchDate).toLocaleDateString() + '</td>' +
                        '<td>' + data.sampleCount + '</td>' +
                        '<td>';
                    if (data.predictedScore == data.actualScore) {
                        row += '<span class="checkmark">&#10003;</span>';
                    } else {
                        row += '<span class="cross">&#10007;</span>';
                    }
                    row += '</td></tr>';
                    $("#match-score-body").append(row);

                    totalProcessed++;
                });

                currentIndex += batchSize;

                // Update the total processed and total match numbers
                $("#total-processed").text(totalProcessed);
                $("#total-matches").text(matchNumbers.length);
            }
        }

        // Start fetching match predictions in batches
        fetchMatchPredictionsInBatches();
    });
</script>

<div id="totals">
    Total Processed: <span id="total-processed">0</span> / Total Matches: <span id="total-matches">0</span>
</div>





